import { Link as LinkExtension } from "@tiptap/extension-link";
import Paragraph from "@tiptap/extension-paragraph";
import Placeholder from "@tiptap/extension-placeholder";
import TaskItem from "@tiptap/extension-task-item";
import TaskList from "@tiptap/extension-task-list";
import Text from "@tiptap/extension-text";
import { EditorContent, useEditor } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import Head from "next/head";
import { useRef } from "react";
import { useForm } from "react-hook-form";
import EditorButtonGroup from "~/components/EditorButtonGroup";
import Avatar from "~/components/icons/Avatar";
import ChevronRight from "~/components/icons/ChevronRight";
import Ellipse from "~/components/icons/Ellipse";
import Enter from "~/components/icons/Enter";
import FrontendTag from "~/components/icons/FrontendTag";
import Priority from "~/components/icons/Priority";
import Project from "~/components/icons/Project";
import Tag from "~/components/icons/Tag";
import { Button } from "~/components/ui/button";
import Combobox from "~/components/ui/combobox";
import DatePicker from "~/components/ui/datepicker";
import { Separator } from "~/components/ui/separator";
import { Textarea } from "~/components/ui/textarea";
import useAutosizeTextArea from "~/hooks/useAutoResizeTextArea";
import { SmilieReplacer } from "~/plugins/SmileyReplacer";
import { api } from "~/utils/api";
import {
  Status,
  UserNames,
  Priority as PriorityEnum,
  Tag as TagEnum,
  Project as ProjectEnum,
} from "~/utils/constants";
import { useAutoAnimate } from "@formkit/auto-animate/react";
import { AI } from "~/components/icons";

export default function Home() {
  const textAreaRef = useRef<HTMLTextAreaElement>(null);

  const {
    watch,
    setValue,
    reset,
    formState: { isDirty },
  } = useForm<{
    title: string;
    status: Status;
    assignees: UserNames[];
    priority: PriorityEnum;
    tags: TagEnum[];
    project: ProjectEnum;
    date: Date;
  }>({
    defaultValues: {
      title: "",
      status: Status.TODO,
      assignees: [],
      date: new Date(),
      priority: PriorityEnum.LOW,
      project: ProjectEnum.WEB,
      tags: [],
    },
  });

  const watchTitle = watch("title");
  const watchTags = watch("tags");
  const watchAssignees = watch("assignees");

  useAutosizeTextArea(textAreaRef.current, watchTitle);
  const createTaskMutation = api.task.createTask.useMutation();

  const [parent] = useAutoAnimate();

  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        bulletList: {
          keepMarks: true,
          keepAttributes: false,
        },
        orderedList: {
          keepMarks: true,
          keepAttributes: false,
        },
      }),
      Placeholder.configure({
        placeholder: "Describe this task",
      }),
      LinkExtension.configure({
        openOnClick: true,
        HTMLAttributes: {
          target: "_blank",
          rel: "noopener noreferrer",
        },
        linkOnPaste: true,
        validate(url) {
          return (
            url.startsWith("http://") ||
            url.startsWith("https://") ||
            url.startsWith("mailto://")
          );
        },
      }),
      TaskList,
      Text,
      Paragraph,
      TaskItem,
      SmilieReplacer,
    ],
    editorProps: {
      attributes: {
        class: "prose focus:outline-none",
      },
    },
    // content: initialPageBody,
    onTransaction: (props) => {
      localStorage.setItem(
        "currentCursor",
        props.transaction.selection.anchor.toString(),
      );
    },
  });

  return (
    <>
      <Head>
        <title>Dimension Assignment</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center scrollbar-hide">
        <div
          className="flex h-auto min-h-[16.9375rem] w-fit min-w-[44.875rem] flex-col rounded-[0.625rem] bg-white text-[#6C6F75]"
          style={{
            boxShadow: "2px 2px 30px 10px rgba(0, 0, 0, 0.20)",
          }}
        >
          <div className="header mb-6 flex items-center gap-0.5 px-4 pt-4">
            <div className="flex items-center gap-1 rounded-sm bg-[#F5F5F550] px-2 py-1.5">
              <FrontendTag />
              <p className="text-sm font-medium">Frontend</p>
            </div>
            <ChevronRight />
            <p className="text-sm font-medium">New Task</p>
          </div>
          <div className="inputs mb-7 px-4">
            <Textarea
              placeholder="Task Title"
              className="h-auto max-w-full text-base font-medium placeholder:text-[#94989E]"
              ref={textAreaRef}
              value={watchTitle}
              onChange={(e) => {
                setValue("title", e.target.value, {
                  shouldDirty: true,
                });
              }}
            />
            <EditorContent
              editor={editor}
              className="w-full px-3 py-2 text-sm font-medium focus:outline-none focus:ring-0"
              placeholder="Describe this task..."
            />
          </div>

          <div className="tags mb-3 flex gap-3 px-7">
            <Button variant={"ghost"} size={"icon"}>
              <AI />
            </Button>
            <div className="flex items-center gap-2" ref={parent}>
              {watchTags.map((tag) => (
                <div
                  key={tag}
                  className="flex items-center gap-1 rounded-lg border border-dashed px-2 py-1.5"
                >
                  <Tag />
                  <p className="text-xs text-[#94989E]">{tag}</p>
                </div>
              ))}
            </div>
          </div>

          <div className="mb-5 flex flex-wrap gap-2 px-7">
            <Combobox
              options={Object.values(Status).map((status) => {
                return {
                  label: (
                    <div className="flex items-center justify-start gap-1">
                      <Ellipse />
                      <p className="text-xs text-[#94989E]">{status}</p>
                    </div>
                  ),
                  value: status,
                };
              })}
              onSelect={(value) => {
                setValue("status", value as Status, {
                  shouldDirty: true,
                });
              }}
              initialButtonText={
                <div className="flex items-center gap-1">
                  <Ellipse />
                  <p className="text-xs text-[#94989E]">Todo</p>
                </div>
              }
            />
            <Combobox
              options={Object.values(UserNames).map((assignee) => {
                return {
                  label: (
                    <div className="flex items-center gap-1">
                      <Avatar />
                      <p className="text-xs text-[#94989E]">{assignee}</p>
                    </div>
                  ),
                  value: assignee,
                };
              })}
              isMultiSelect={true}
              onSelect={(value) => {
                setValue("assignees", [...watchAssignees, value as UserNames], {
                  shouldDirty: true,
                });
              }}
              initialButtonText={
                <div className="flex items-center gap-1">
                  <Avatar />
                  <p className="text-xs text-[#94989E]">Assignee</p>
                </div>
              }
            />
            <Combobox
              options={Object.values(PriorityEnum).map((priority) => {
                return {
                  label: (
                    <div className="flex items-center gap-1">
                      <Priority />
                      <p className="text-xs text-[#94989E]">{priority}</p>
                    </div>
                  ),
                  value: priority,
                };
              })}
              onSelect={(value) => {
                setValue("priority", value as PriorityEnum, {
                  shouldDirty: true,
                });
              }}
              initialButtonText={
                <div className="flex items-center gap-1">
                  <Priority />
                  <p className="text-xs text-[#94989E]">Priority</p>
                </div>
              }
            />
            <Combobox
              options={Object.values(TagEnum).map((tag) => {
                return {
                  label: (
                    <div className="flex items-center gap-1">
                      <Tag />
                      <p className="text-xs text-[#94989E]">{tag}</p>
                    </div>
                  ),
                  value: tag,
                };
              })}
              isMultiSelect={true}
              onSelect={(value) => {
                const newTags = [...watchTags];
                if (newTags.includes(value as TagEnum)) {
                  newTags.splice(newTags.indexOf(value as TagEnum), 1);
                } else {
                  newTags.push(value as TagEnum);
                }
                setValue("tags", newTags, {
                  shouldDirty: true,
                });
              }}
              initialButtonText={
                <div className="flex items-center gap-1">
                  <Tag />
                  <p className="text-xs text-[#94989E]">Tag</p>
                </div>
              }
            />
            <Combobox
              options={Object.values(ProjectEnum).map((project) => {
                return {
                  label: (
                    <div className="flex items-center gap-1">
                      <Project />
                      <p className="text-xs text-[#94989E]">{project}</p>
                    </div>
                  ),
                  value: project,
                };
              })}
              onSelect={(value) => {
                setValue("project", value as ProjectEnum, {
                  shouldDirty: true,
                });
              }}
              initialButtonText={
                <div className="flex items-center gap-1">
                  <Project />
                  <p className="text-xs text-[#94989E]">Project</p>
                </div>
              }
            />
            <DatePicker
              onSetDate={(date) => {
                setValue("date", date, {
                  shouldDirty: true,
                });
              }}
            />
          </div>
          <Separator />
          <div className="my-4 flex items-center justify-between px-7">
            <div className="flex gap-1">
              <EditorButtonGroup editor={editor} />
            </div>

            <Button
              disabled={!isDirty}
              onClick={async () => {
                const content = editor?.getHTML();
                await createTaskMutation.mutateAsync({
                  title: watchTitle,
                  description: content,
                  assignees: watchAssignees,
                  status: watch("status"),
                  priority: watch("priority"),
                  dueDate: watch("date"),
                  project: watch("project"),
                  tags: watchTags,
                });
                reset();
              }}
              className="rounded-lg"
              style={{
                boxShadow: "0px 3px 0px 0px #3F2ABD",
              }}
            >
              <div className="flex items-center">
                <span>Create</span>
                <Separator
                  className="mx-2 h-10 bg-white/20"
                  orientation="vertical"
                />
                <Enter />
              </div>
            </Button>
          </div>
        </div>
      </main>
    </>
  );
}
